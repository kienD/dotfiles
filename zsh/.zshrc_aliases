source ~/Liferay/acUserConfig.sh

###############################
########### General ###########
###############################

alias pls='sudo $(fc -ln -1)'

alias java-kill='fuser -k 8080/tcp'

alias ll='ls -alF'
alias la='ls -A'

alias sbp='source $HOME/.bash_profile'
alias szrc='source $HOME/.zshrc'

# Ant
alias aa='ant all'
alias ad='ant deploy'
alias acd='ant clean deploy'

# Apache
alias apache='apache2ctl'

# Facebook Messenger CLI
alias fbm='fb-messenger-cli'

# Git
alias gc='git checkout'
alias gca='g commit --amend'
alias gcb='git checkout -b'
alias gcm='g commit -m'
alias gpr-asah='git pull --rebase upstream 7.0.x'
# alias gpr-prod='git pull --rebase upstream 7.0.x'
alias gpr-faro='git pull --rebase upstream 7.1.x'
alias gpr-hotfix='git pull --rebase upstream hotfix'
alias gpr-master='git pull --rebase upstream master'
alias gpr='git pull --rebase'
alias gp-faro='git push origin 7.1.x'
alias gs='git status'
alias gsync='git pull --rebase upstream $(current_branch) && git push origin $(current_branch)'

# ghpr
alias ghpr='create-pr'
alias ghpr-faro='ghpr -b liferay:7.1.x -l Review\ Needed'
alias ghpr-faro-fe='ghpr-faro -a fcodias,jhonattasferreira,gabrielpramos'
alias ghprff='ghpr-faro-fe'
# alias ghpr-hotfix='ghpr liferay hotfix'

# Gradle
alias gradle-fs='gradle wrapper --gradle-version 6.6.1 && gradle formatSource'

# Gradlew from any level
function gw {
  local root_level=$(git rev-parse --show-toplevel 2>/dev/null)

  if [[ -n "$root_level" && -f "$root_level/gradlew" ]]; then
    root_level="$root_level/gradlew"
  else
    root_level=$(which gradlew)
  fi

  "$root_level" $@
}

# Npm
alias nrb='npm run build'
alias nrf='npm run format'
alias nrl='npm run lint'
alias nrs='npm run start'
alias nrt='npm run test:dev'
alias nrtc='npm run test:dev -- --coverage'
alias nrtu='npm run test:dev -- -u'
alias nrtw='npm run test:dev -- --watch'
alias nrtwa='npm run test:dev -- --watchAll'
alias nrw='npm run watch'

# xsel
alias pbcopy='xsel --clipboard --input'
alias pbpase='xsel --clipboard --output'

# Yarn
alias yrb='yarn run build'
alias yrf='yarn run format'
alias yrl='yarn run lint'
alias yrs='yarn run start'
alias yrt='yarn run test:dev'
alias yrtc='yarn run test:dev -- --coverage'
alias yrtu='yarn run test:dev -- -u'
alias yrtw='yarn run test:dev -- --watch'
alias yrtwa='yarn run test:dev -- --watchAll'
alias yrw='yarn run watch'

###############################
########### Liferay ###########
###############################

# Asah Project
 alias deploy-asah='$HOME/Liferay/com-liferay-osb-asah-private && gradle clean assemble && docker-compose -f docker-compose.monolith.yml up -d --build && faro-logs'

# Faro Project
alias deploy-faro='$HOME/Liferay/com-liferay-osb-faro-private/osb-faro-web && gradle deploy && npm run start'
alias faro-bundles='$HOME/Liferay/bundles/tomcat-8.0.32/bin'
alias faro-bundles-run='faro-bundles && cr'
alias faro-final='$HOME/Liferay/com-liferay-osb-faro-private/osb-faro-web && gradle formatSource &&  npm run test'
alias farobr='faro-bundles && cr'
alias gnrs='$HOME/Liferay/com-liferay-osb-faro-private && ./gradlew deploy && $HOME/Liferay/ee-7.0.x/com-liferay-osb-faro-private/osb-faro-web && nrs'
alias start-faro-docker='$HOME/Liferay/com-liferay-osb-faro-private && ./gradlew startDocker'
alias create-faro-docker='$HOME/Liferay/com-liferay-osb-faro-private && ./gradlew createDocker'
alias cfd='create-faro-docker'
alias sfd='start-faro-docker'
alias csfd='cfd && $HOME/Liferay/com-liferay-osb-faro-private && ./gradlew deploy && sfd && faro-logs'
alias sfdl='start-faro-docker && faro-logs'

function enable-recommendations() {
  curl -X POST --user "$userName:$password" http://localhost:3000/o/faro/main/project/$1/recommendations/enable
}

# Rancher

# Get logs for pod based on namespace & role
function check-rancher-logs() {
  local selected_namespace="$1"
  local selected_role="$2"

  # Check if any arguments exist
  if [ "$#" -eq 0 ]; then
    PS3="Select Namespace: "

    select namespace in $(rancher kubectl get namespaces --output=jsonpath={.items..metadata.name})

    do
      selected_namespace="$namespace"

      break;
    done
  fi

  echo "Namespace: $selected_namespace"

  # Check if second argument exists
  if [ -z "$selected_role" ]; then
    PS3="Select Role: "

    select role in $(rancher kubectl -n "$selected_namespace" get pods --output=jsonpath={.items..metadata.labels.role})

    do
      selected_role="$role"

      break;
    done
  fi

  echo "Role: $selected_role"

  rancher kubectl -n "$selected_namespace" logs -f $(rancher kubectl -n "$selected_namespace" get pod --selector=role="$selected_role" --output=jsonpath={.items..metadata.name})
}
